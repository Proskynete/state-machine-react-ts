import { assign, createMachine, EventObject } from "xstate";
import { Context, Events } from "./types";
import { fetchCountries } from "../utils/api";

const defaultContext: Context = {
  passengers: [],
  countrySelected: "",
  countries: [],
  error: "",
};

interface FetchCountriesEvent extends EventObject {
  data: Context["countries"];
}

const fillContries = {
  initial: "loading",
  states: {
    loading: {
      invoke: {
        id: "fetch-countries",
        src: fetchCountries,
        onDone: {
          target: "success",
          actions: assign({
            countries: (_, event: FetchCountriesEvent) => event.data,
          }),
        },
        onError: {
          target: "failure",
          actions: assign({
            error: "Falló la carga de países",
          }),
        },
      },
    },
    success: {},
    failure: {
      on: {
        RETRY: {
          target: "loading",
        },
      },
    },
  },
};

const bookingMachine = createMachine(
  {
    id: "Buy plane tickets",
    initial: "initial",
    context: defaultContext,
    predictableActionArguments: true,
    tsTypes: {} as import("./bookingMachine.typegen").Typegen0, // This is autogenerated by the xstate VSCode extension
    schema: {
      context: {} as Context,
      events: {} as Events,
    },
    states: {
      initial: {
        on: {
          START: { target: "search" },
        },
      },
      search: {
        on: {
          CONTINUE: {
            target: "passengers",
            actions: assign({
              countrySelected: (_, event) => event.countrySelected,
            }),
          },
          CANCEL: "initial",
        },
        ...fillContries,
      },

      passengers: {
        on: {
          DONE: {
            target: "tickets",
            cond: "moreThanOnePassenger",
          },
          CANCEL: {
            target: "initial",
            actions: "clearContext",
          },
          ADD: {
            target: "passengers",
            actions: assign({
              passengers: (context, event) => {
                return [...context.passengers, event.passenger];
              },
            }),
          },
        },
      },
      tickets: {
        after: {
          5000: {
            target: "initial",
            actions: "clearContext",
          },
        },
        on: {
          FINISH: "initial",
        },
      },
    },
  },
  {
    actions: {
      clearContext: assign(defaultContext),
    },
    guards: {
      moreThanOnePassenger: ({ passengers }) => passengers.length > 0,
    },
  }
);

export { bookingMachine };
